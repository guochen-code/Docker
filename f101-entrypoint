The error you're encountering is due to the fact that the nginx image doesn’t have the entrypoint.sh script in its default $PATH. When you specify a custom entrypoint, Docker expects that script to be executable within the container. Here's how you can resolve this issue:
Correct Docker Compose File
You need to make sure that the entrypoint.sh script is executable and correctly configured in your docker-compose.yml file. Here’s how to properly set it up:
1. entrypoint.sh Script
Ensure that your entrypoint.sh script is executable and contains the correct shebang. Here's your updated script:
sh
Copy code
#!/bin/sh
echo "this is running..."
exec nginx -g 'daemon off;'


2. docker-compose.yml File
Update your docker-compose.yml file as follows:
yaml
Copy code
version: '3'
services:
  web:
    image: nginx
    volumes:
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/sh", "/entrypoint.sh"]
    ports:
      - "80:80"


Explanation
/bin/sh: Specifies the shell to execute your script.
/entrypoint.sh: Path to your script inside the container.
Steps to Apply Changes
Ensure Script is Executable
Make sure entrypoint.sh is executable:
sh
Copy code
chmod +x entrypoint.sh


Rebuild and Restart Docker Compose
Run docker-compose up to start the container. If you had previously started it, you might need to remove the old containers first:
sh
Copy code
docker-compose down
docker-compose up


Troubleshooting
Verify Path: Ensure that the path /entrypoint.sh is correct and that it is mounted properly. You can check this by running a temporary container with a shell and inspecting the filesystem:
sh
Copy code
docker run -it --rm -v $(pwd)/entrypoint.sh:/entrypoint.sh nginx /bin/sh
Inside the container, check if /entrypoint.sh exists and is executable.
Check Logs: Use docker-compose logs to check for errors related to the entrypoint script.
By following these steps, you should be able to run your entrypoint.sh script with the nginx image correctly.
