containers are usually immutable and ephemeral
immutable infrastructure: only re-deploy containers, never change
this is the ideal scenario, but what about databases, or unique data?
docker gives us features to ensure these "separation of concerns"
this is known as "persistent data"

two solutions: volumes and bind mounts
volumes: make special location outside of container UFS
bind mounts: link container path to host path

*********************************************************************************************************************************************
docker image pull mysql
docker inspect mysql # find :Volumes: /var/lib/mysql # will outlive container even it is removed for data persistency
docker container run -d --name mysql -e MYSQL_ALLOW_PASSWORD=True mysql # need this environment variable to work
# can also see Mounts:[......]
# the running container getting its own unique location on the host, to store the data, in the background, mounted to that location in the container, so the location in the container
just thinks it's writing to /var/lib/mysql, the data actually living in that location on the host

docker volume ls
docker volume inspect <volume Id>

# difficult to tell which volume is which from volume Id and even inspect does not provide much information # but we can give a name
docker container run -d --name mysql -e MYSQL_ALLOW_PASSWORD=True -v <given_name_to_volume>:/var/lib/mysql mysql

#before making a new volume in a docer run -v command for a MySQL container, where could you look to see where MySQL expects the data path to be?
**** (1) docker container inspect: This would show you the data location if the container was already up and running. You could use this command if there was a mysql container already running or previously run with a volume attached. But that's not always going to be the case.
**** (2) docker hub: Looking through the README on the official image page. Or, you could do a docker history mysql
*********************************************************************************************************************************************
bind mounting
- maps a host file or directory to a container file or directory (attach an existing directory on your host to a directory inside of a container)
- just two locations pointing to the same file(s)
- skips UFS, and host files overwrite any in container
- cannot use in Dockerfile, must be at container run
- ... run -v /Users/bret/stuff:/path/container (mac/linux)
- ... run -v //c/Users/bret/stuff:/path/container (windows)


For PowerShell use: ${pwd} 
For cmd.exe "Command Prompt use: %cd%
Linux/macOS bash, sh, zsh, and Windows Docker Toolbox Quickstart Terminal use: $(pwd) 
